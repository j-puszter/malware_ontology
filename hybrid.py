from owlready2 import *
from hybrid_analysis_api import HybridAnalysis

ontology = get_ontology("file://malware.owl").load()
ha = HybridAnalysis('ct9r4ybg79f69677c4kg3wr2f4fcad7e6qoyqy5pb915f40e952w22bveda0806f')


def map_data(all_data):
    for data in all_data:
        sample_summary = ontology.SampleSummary(data.get('job_id'))
        sample_summary.hasJobId = data.get('job_id')
        if data.get('classification_tags'):
            sample_summary.hasClassificationTag = data.get('classification_tags')
        if data.get('tags'):
            sample_summary.hasTag = data.get('tags')
        for value in data.get('submissions'):
            sample_summary.hasSubmission.append(map_submission(value))
        for value in data.get('machine_learning_models'):
            sample_summary.hasMachineLearningModel.append(map_machine_learning_model(value))
        if data.get('crowdstrike_ai') is not None:
            sample_summary.hasCrowdStrikeAi = map_crowdstrike_ai(data.get('crowdstrike_ai'))
        if data.get('environment_id') is not None:
            sample_summary.hasEnvironmentId = data.get('environment_id')
        if data.get('environment_description') is not None:
            sample_summary.hasEnvironmentDescription = data.get('environment_description')
        if data.get('size') is not None:
            sample_summary.size.append(data.get('size'))
        if data.get('type') is not None:
            sample_summary.hasType = data.get('type')
        if data.get('type_short'):
            sample_summary.hasTypeShort = data.get('type_short')
        if data.get('target_url') is not None:
            sample_summary.hasTargetUrl = data.get('target_url')
        if data.get('state') is not None:
            sample_summary.hasState = data.get('state')
        if data.get('error_type') is not None:
            sample_summary.hasErrorType = data.get('error_type')
        if data.get('error_origin') is not None:
            sample_summary.hasErrorOrigin = data.get('error_origin')
        if data.get('submit_name') is not None:
            sample_summary.hasSubmitName = data.get('submit_name')
        if data.get('md5') is not None:
            sample_summary.md5.append(data.get('md5'))
        if data.get('sha1') is not None:
            sample_summary.sha1.append(data.get('sha1'))
        if data.get('sha256') is not None:
            sample_summary.sha256.append(data.get('sha256'))
        if data.get('sha512') is not None:
            sample_summary.sha512.append(data.get('sha512'))
        if data.get('ssdeep') is not None:
            sample_summary.hasSsdeep = data.get('ssdeep')
        if data.get('imphash') is not None:
            sample_summary.hasImphash = data.get('imphash')
        if data.get('entrypoint') is not None:
            sample_summary.hasEntrypoint = data.get('entrypoint')
        if data.get('entrypoint_section') is not None:
            sample_summary.hasEntrypointSection = data.get('entrypoint_section')
        if data.get('image_base') is not None:
            sample_summary.hasImageBase = data.get('image_base')
        if data.get('subsystem') is not None:
            sample_summary.hasSubsystem = data.get('subsystem')
        if data.get('image_file_characteristics'):
            sample_summary.hasImageFileCharacteristic = data.get('image_file_characteristics')
        if data.get('dll_characteristics'):
            sample_summary.hasDllCharacteristic = data.get('dll_characteristics')
        if data.get('major_os_version') is not None:
            sample_summary.hasMajorOsVersion = data.get('major_os_version')
        if data.get('minor_os_version') is not None:
            sample_summary.hasMinorOsVersion = data.get('minor_os_version')
        if data.get('av_detect') is not None:
            sample_summary.hasAvDetect = data.get('av_detect')
        if data.get('vx_family') is not None:
            sample_summary.hasVxFamily = data.get('vx_family')
        if data.get('analysis_start_time') is not None:
            sample_summary.hasAnalysisStartTime = data.get('analysis_start_time')
        if data.get('threat_score') is not None:
            sample_summary.hasThreatScore = data.get('threat_score')
        if data.get('threat_level') is not None:
            sample_summary.hasThreatLevel = data.get('threat_level')
        if data.get('verdict') is not None:
            sample_summary.hasVerdict = data.get('verdict')
        for value in data.get('certificates'):
            sample_summary.hasCertificate.append(map_certificate(value))
        if data.get('domains'):
            sample_summary.hasSampleDomain = data.get('domains')
        if data.get('compromised_hosts'):
            sample_summary.hasCompromisedHost = data.get('compromised_hosts')
        if data.get('hosts'):
            sample_summary.hasHost = data.get('hosts')
        if data.get('total_network_connections') is not None:
            sample_summary.hasTotalNetworkConnections = data.get('total_network_connections')
        if data.get('total_processes') is not None:
            sample_summary.hasTotalProcesses = data.get('total_processes')
        if data.get('total_signatures') is not None:
            sample_summary.hasTotalSignatures = data.get('total_signatures')
        for value in data.get('extracted_files'):
            sample_summary.hasExtractedFile.append(map_extracted_files(value))
        if data.get('file_metadata') is not None:
            sample_summary.hasFileMetadata = map_file_meta_data(data.get('file_metadata'))
        for value in data.get('processes'):
            sample_summary.hasProcess.append(map_process(value))
        for value in data.get('mitre_attcks'):
            sample_summary.hasMitreAttckSignature.append(map_mitre_attck(value))
        if data.get('network_mode') is not None:
            sample_summary.hasNetworkMode = data.get('network_mode')
        for value in data.get('signatures'):
            sample_summary.hasSignature.append(map_signature(value))
        if data.get('url_analysis') is not None and data.get('url_analysis'):
            url = ontology.url()
            url.hasSampleSummary.append(sample_summary)
        else:
            file = ontology.file()
            file.hasSampleSummary.append(sample_summary)

def map_submission(data):
    submission = ontology.Submission(data.get('submission_id'))
    submission.hasSubmissionId = data.get('submission_id')
    if data.get('filename') is not None:
        submission.hasFileName = data.get('filename')
    if data.get('url') is not None:
        submission.hasUrl = data.get('url')
    if data.get('created_at') is not None:
        submission.wasCreated = data.get('created_at')
    return submission


def map_machine_learning_model(data):
    machine_learning_model = ontology.MachineLearningModel()
    if data.get('name') is not None:
        machine_learning_model.hasName = data.get('name')
    if data.get('version') is not None:
        machine_learning_model.hasVersion = data.get('version')
    if data.get('status') is not None:
        machine_learning_model.hasStatus = data.get('status')
    for value in data.get('data'):
        machine_learning_model.hasKeyStringValue.append(map_key_string_data(value))
    if data.get('created_at') is not None:
        machine_learning_model.wasCreated = data.get('created_at')
    return machine_learning_model


def map_key_string_data(data):
    key_string_value = ontology.KeyStringValue()
    if data.get('id') is not None:
        key_string_value.key.append(data.get('id'))
    if data.get('value') is not None:
        key_string_value.value.append(data.get('value'))
    return key_string_value


def map_crowdstrike_ai(data):
    crowdstrike_ai = ontology.CrowdStrikeAi()
    for value in data.get('executable_process_memory_analysis'):
        crowdstrike_ai.hasExecutableProcessMemoryAnalysis.append(map_executable_process_memory_analysis(value))
    for value in data.get('analysis_related_urls'):
        crowdstrike_ai.hasAnalysisRelatedUrl.append(map_analysis_related_url(value))
    return crowdstrike_ai


def map_executable_process_memory_analysis(data):
    executable_process_memory_analysis = ontology.ExecutableProcessMemoryAnalysis()
    if data.get('verdict') is not None:
        executable_process_memory_analysis.hasVerdict = data.get('verdict')
    if data.get('filename') is not None:
        executable_process_memory_analysis.hasFilename = data.get('filename')
    if data.get('address') is not None:
        executable_process_memory_analysis.hasAddress = data.get('address')
    if data.get('flags') is not None:
        executable_process_memory_analysis.hasFlags = data.get('flags')
    if data.get('file_process') is not None:
        executable_process_memory_analysis.hasFileProcess = data.get('file_process')
    if data.get('file_process_pid') is not None:
        executable_process_memory_analysis.hasFileProcessPid = data.get('file_process_pid')
    if data.get('file_process_sha256') is not None:
        executable_process_memory_analysis.hasFileProcessSha256 = data.get('file_process_sha256')
    if data.get('file_process_disc_pathway') is not None:
        executable_process_memory_analysis.hasFileProcessDiscPathway = data.get('file_process_disc_pathway')
    return executable_process_memory_analysis


def map_analysis_related_url(data):
    analysis_related_url = ontology.AnalysisRelatedUrl()
    if data.get('url') is not None:
        analysis_related_url.hasUrl = data.get('url')
    if data.get('verdict') is not None:
        analysis_related_url.hasVerdict = data.get('verdict')
    if data.get('type') is not None:
        analysis_related_url.hasType = data.get('type')
    return analysis_related_url


def map_certificate(data):
    certificate = ontology.Certificate()
    if data.get('owner') is not None:
        certificate.hasOwner = data.get('owner')
    if data.get('issuer') is not None:
        certificate.hasIssuer = data.get('issuer')
    if data.get('serial_number') is not None:
        certificate.hasSerialNumber = data.get('serial_number')
    if data.get('md5') is not None:
        certificate.md5.append(data.get('md5'))
    if data.get('sha1') is not None:
        certificate.sha1.append(data.get('sha1'))
    if data.get('valid_from') is not None:
        certificate.isValidFrom = data.get('valid_from')
    if data.get('valid_until') is not None:
        certificate.isValidUntil = data.get('valid_until')
    return certificate

def map_extracted_files(data):
    extracted_file = ontology.ExtractedFile()
    if data.get('name') is not None:
        extracted_file.hasName = data.get('name')
    if data.get('file_path') is not None:
        extracted_file.hasFilePath = data.get('file_path')
    if data.get('file_size') is not None:
        extracted_file.size.append(data.get('file_size'))
    if data.get('sha1') is not None:
        extracted_file.sha1.append(data.get('sha1'))
    if data.get('sha256') is not None:
        extracted_file.sha256.append(data.get('sha256'))
    if data.get('md5') is not None:
        extracted_file.md5.append(data.get('md5'))
    if data.get('type_tags'):
        extracted_file.hasTypeTag = data.get('type_tags')
    if data.get('description') is not None:
        extracted_file.hasDescription = data.get('description')
    if data.get('runtime_process') is not None:
        extracted_file.hasRuntimeProcess = data.get('runtime_process')
    if data.get('threat_level') is not None:
        extracted_file.hasThreatLevel = data.get('threat_level')
    if data.get('threat_level_readable') is not None:
        extracted_file.hasThreatLevelReadable = data.get('threat_level_readable')
    if data.get('av_label') is not None:
        extracted_file.hasAvLabel = data.get('av_label')
    if data.get('av_matched') is not None:
        extracted_file.hasAvMatched = data.get('av_matched')
    if data.get('av_total') is not None:
        extracted_file.hasAvTotal = data.get('av_total')
    return extracted_file


def map_file_meta_data(data):
    file_meta_data = ontology.FileMetadata()
    if data.get('file_compositions'):
        file_meta_data.hasFileComposition = data.get('file_compositions')
    if data.get('imported_objects'):
        file_meta_data.hasImportedObject = data.get('imported_objects')
    if data.get('file_analysis'):
        file_meta_data.hasFileAnalysis = data.get('file_analysis')
    if data.get('total_file_compositions_imports') is not None:
        file_meta_data.hasTotalFileCompositionsImports = data.get('total_file_compositions_imports')
    return file_meta_data


def map_process(data):
    process = ontology.Process()
    if data.get('uid') is not None:
        process.hasUid = data.get('uid')
    if data.get('parentuid') is not None:
        process.hasParentuid = data.get('parentuid')
    if data.get('name') is not None:
        process.hasName = data.get('name')
    if data.get('normalized_path') is not None:
        process.hasNormalizedPath = data.get('normalized_path')
    if data.get('command_line') is not None:
        process.hasCommandLine = data.get('command_line')
    if data.get('sha256') is not None:
        process.sha256.append(data.get('sha256'))
    if data.get('av_label') is not None:
        process.hasAvLabel = data.get('av_label')
    if data.get('av_matched') is not None:
        process.hasAvMatched = data.get('av_matched')
    if data.get('av_total') is not None:
        process.hasAvTotal = data.get('av_total')
    if data.get('pid') is not None:
        process.hasPid = data.get('pid')
    if data.get('icon') is not None:
        process.hasIcon = data.get('icon')
    for value in data.get('file_accesses'):
        process.hasFileAccess.append(map_file_access(value))
    for value in data.get('created_files'):
        process.hasCreatedFile.append(map_created_file(value))
    for value in data.get('registry'):
        process.hasRegistryAccess.append(map_registry_access(value))
    if data.get('mutants'):
        process.hasMutant = data.get('mutants')
    for value in data.get('handles'):
        process.hasHandle.append(map_handle(value))
    for value in data.get('streams'):
        process.hasStream.append(map_stream(value))
    for value in data.get('script_calls'):
        process.hasScriptCall.append(map_script_call(value))
    for value in data.get('process_flags'):
        process.hasProcessFlag.append(map_process_flag(value))
    for value in data.get('amsi_calls'):
        process.hasAmsiCall.append(map_amsi_call(value))
    return process


def map_file_access(data):
    file_access = ontology.FileAccess()
    if data.get('type') is not None:
        file_access.hasType = data.get('type')
    if data.get('path') is not None:
        file_access.hasPath = data.get('path')
    if data.get('mask') is not None:
        file_access.hasMask = data.get('mask')
    return file_access


def map_created_file(data):
    created_file = ontology.CreatedFile()
    if data.get('file') is not None:
        created_file.hasFile = data.get('file')
    if data.get('null_byte') is not None:
        created_file.hasNullByte = data.get('null_byte')
    return created_file


def map_registry_access(data):
    registry_access = ontology.RegistryAccess()
    if data.get('operation') is not None:
        registry_access.hasOperation = data.get('operation')
    if data.get('path') is not None:
        registry_access.hasPath = data.get('path')
    if data.get('key') is not None:
        registry_access.key.append(data.get('key'))
    if data.get('value') is not None:
        registry_access.value.append(data.get('value'))
    if data.get('status') is not None:
        registry_access.hasStatus = data.get('status')
    if data.get('status_human_readable') is not None:
        registry_access.hasStatusHumanReadable = data.get('status_human_readable')
    return registry_access


def map_handle(data):
    handle = ontology.Handle()
    if data.get('id') is not None:
        handle.hasHandleId = data.get('id')
    if data.get('type') is not None:
        handle.hasType = data.get('type')
    if data.get('path') is not None:
        handle.hasPath = data.get('path')
    return handle


def map_stream(data):
    stream = ontology.Stream()
    if data.get('uid') is not None:
        stream.hasUid = data.get('uid')
    if data.get('file_name') is not None:
        stream.hasFileName = data.get('file_name')
    if data.get('human_keywords') is not None:
        stream.hasHumanKeywords = data.get('human_keywords')
    if data.get('instructions'):
        stream.hasInstructions = data.get('instructions')
    if data.get('executed') is not None:
        stream.wasExecuted = data.get('executed')
    for value in data.get('data'):
        stream.hasKeyStringValue.append(map_key_string_data(value))
    return stream


def map_script_call(data):
    script_call = ontology.ScriptCall()
    if data.get('cls_id') is not None:
        script_call.hasClsId = data.get('cls_id')
    if data.get('dispatch_id') is not None:
        script_call.hasDispatchId = data.get('dispatch_id')
    if data.get('status') is not None:
        script_call.hasStatus = data.get('status')
    if data.get('result') is not None:
        script_call.hasResult = data.get('result')
    for value in data.get('parameters'):
        script_call.hasScriptCallParameter.append(map_script_call_parameter(value))
    if data.get('matched_malicious_signatures') is not None:
        script_call.hasMatchedMaliciousSignature = data.get('matched_malicious_signatures')
    return script_call


def map_script_call_parameter(data):
    script_call_parameter = ontology.ScriptCallParameter()
    if data.get('name') is not None:
        script_call_parameter.hasName = data.get('name')
    if data.get('value') is not None:
        script_call_parameter.value.append(data.get('value'))
    if data.get('comment') is not None:
        script_call_parameter.hasComment = data.get('comment')
    if data.get('argument_number') is not None:
        script_call_parameter.hasArgumentNumber = data.get('argument_number')
    if data.get('meaning') is not None:
        script_call_parameter.hasMeaning = data.get('meaning')
    return script_call_parameter

def map_process_flag(data):
    process_flag = ontology.ProcessFlag()
    if data.get('name') is not None:
        process_flag.hasName = data.get('name')
    if data.get('data') is not None:
        process_flag.hasData = data.get('data')
    if data.get('image') is not None:
        process_flag.hasImage = data.get('image')
    return process_flag


def map_amsi_call(data):
    amsi_call = ontology.AmsiCall()
    if data.get('app_name') is not None:
        amsi_call.hasAppName = data.get('app_name')
    if data.get('filename') is not None:
        amsi_call.hasFileName = data.get('filename')
    if data.get('raw_script_content') is not None:
        amsi_call.hasRawScriptContent = data.get('raw_script_content')
    return amsi_call



def map_mitre_attck(data):
    mitre_attck = ontology.MitreAttckSignature()
    if data.get('malicious_identifiers_count') is not None:
        mitre_attck.hasMaliciousIdentifiersCount = data.get('malicious_identifiers_count')
    if data.get('malicious_identifiers') is not None:
        mitre_attck.hasMaliciousIdentifier = data.get('malicious_identifiers')
    if data.get('suspicious_identifiers_count') is not None:
        mitre_attck.hasSuspiciousIdentifiersCount = data.get('suspicious_identifiers_count')
    if data.get('suspicious_identifiers') is not None:
        mitre_attck.hasSuspiciousIdentifier = data.get('suspicious_identifiers')
    if data.get('informative_identifiers_count') is not None:
        mitre_attck.hasInformativeIdentifiersCount = data.get('informative_identifiers_count')
    if data.get('informative_identifiers') is not None:
        mitre_attck.hasInformativeIdentifier = data.get('informative_identifiers')
    if data.get('attck_id') is not None:
        technique = ontology.Technique(data.get('attck_id'))
        mitre_attck.hasAttckTechnique = technique
    return mitre_attck


def map_signature(data):
    signature = ontology.Signature()
    if data.get('threat_level') is not None:
        signature.hasThreatLevel = data.get('threat_level')
    if data.get('threat_level_human') is not None:
        signature.hasThreatLevelHuman = data.get('threat_level_human')
    if data.get('category') is not None:
        signature.hasCategory = data.get('category')
    if data.get('identifier') is not None:
        signature.hasIdentifier = data.get('identifier')
    if data.get('type') is not None:
        signature.hasSignatureType = data.get('type')
    if data.get('relevance') is not None:
        signature.hasRelevance = data.get('relevance')
    if data.get('name') is not None:
        signature.hasName = data.get('name')
    if data.get('description') is not None:
        signature.hasDescription = data.get('description')
    if data.get('origin') is not None:
        signature.hasOrigin = data.get('origin')
    if data.get('capec_id') is not None:
        signature.hasCapecId = data.get('capec_id')
    if data.get('attck_id') is not None:
        technique = ontology.Technique(data.get('attck_id'))
        signature.hasAttckTechnique = technique
    return signature


def main():
    result = ha.feed_latest()

    data1 = result['data'][0:100]
    data2 = result['data'][100:200]
    data3 = result['data'][200:]

    job_ids1 = [sample_summary.get('job_id') for sample_summary in data1]
    job_ids2 = [sample_summary.get('job_id') for sample_summary in data2]
    job_ids3 = [sample_summary.get('job_id') for sample_summary in data3]

    map_data(ha.report_summary(job_ids1))
    map_data(ha.report_summary(job_ids2))
    map_data(ha.report_summary(job_ids3))

    ontology.save(file="malware.owl", format="rdfxml")

if __name__ == "__main__":
    main()
