import mitreattack.attackToExcel.attackToExcel as attackToExcel
import mitreattack.attackToExcel.stixToDf as stixToDf
from owlready2 import *
import pandas as pd

ontology = get_ontology("file://malwareTemplate.owl").load()


def is_valid_value(value):
    if pd.isna(value) or value == "":
        return False
    return True


def map_tactics(tactics_data, domain):
    tactics = tactics_data.get("tactics")
    id_col = tactics.get("ID").to_numpy()
    name_col = tactics.get("name").to_numpy()
    description_col = tactics.get("description").to_numpy()
    url_col = tactics.get("url").to_numpy()
    created_col = tactics.get("created").to_numpy()
    last_modified_col = tactics.get("last modified").to_numpy()
    version_col = tactics.get("version").to_numpy()
    for i in range(len(tactics.index)):
        tactic = ontology.Tactic(id_col[i])
        tactic.hasId = id_col[i]
        tactic.hasDomain = domain
        if is_valid_value(name_col[i]):
            tactic.hasName = name_col[i]
        if is_valid_value(description_col[i]):
            tactic.hasDescription = description_col[i]
        if is_valid_value(url_col[i]):
            tactic.hasUrl = url_col[i]
        if is_valid_value(created_col[i]):
            tactic.wasCreated = created_col[i]
        if is_valid_value(last_modified_col[i]):
            tactic.wasLastModified = last_modified_col[i]
        if is_valid_value(version_col[i]):
            tactic.hasVersion = version_col[i]


def map_mitigations(mitigations_data, domain):
    mitigations = mitigations_data.get("mitigations")
    id_col = mitigations.get("ID").to_numpy()
    name_col = mitigations.get("name").to_numpy()
    description_col = mitigations.get("description").to_numpy()
    url_col = mitigations.get("url").to_numpy()
    created_col = mitigations.get("created").to_numpy()
    last_modified_col = mitigations.get("last modified").to_numpy()
    version_col = mitigations.get("version").to_numpy()
    relationship_citations_col = mitigations.get("relationship citations").to_numpy()
    for i in range(len(mitigations.index)):
        mitigation = ontology.Mitigation(id_col[i])
        mitigation.hasId = id_col[i]
        mitigation.hasDomain = domain
        if is_valid_value(name_col[i]):
            mitigation.hasName = name_col[i]
        if is_valid_value(description_col[i]):
            mitigation.hasDescription = description_col[i]
        if is_valid_value(url_col[i]):
            mitigation.hasUrl = url_col[i]
        if is_valid_value(created_col[i]):
            mitigation.wasCreated = created_col[i]
        if is_valid_value(last_modified_col[i]):
            mitigation.wasLastModified = last_modified_col[i]
        if is_valid_value(version_col[i]):
            mitigation.hasVersion = version_col[i]
        if is_valid_value(relationship_citations_col[i]):
            mitigation.hasRelationshipCitations = relationship_citations_col[i]


def map_groups(groups_data):
    groups = groups_data.get("groups")
    id_col = groups.get("ID").to_numpy()
    name_col = groups.get("name").to_numpy()
    description_col = groups.get("description").to_numpy()
    url_col = groups.get("url").to_numpy()
    created_col = groups.get("created").to_numpy()
    last_modified_col = groups.get("last modified").to_numpy()
    version_col = groups.get("version").to_numpy()
    contributors_col = groups.get("contributors").to_numpy()
    associated_groups_col = groups.get("associated groups").to_numpy()
    associated_groups_citations_col = groups.get("associated groups citations").to_numpy()
    relationship_citations_col = groups.get("relationship citations").to_numpy()
    for i in range(len(groups.index)):
        group = ontology.Group(id_col[i])
        group.hasId = id_col[i]
        if is_valid_value(name_col[i]):
            group.hasName = name_col[i]
        if is_valid_value(description_col[i]):
            group.hasDescription = description_col[i]
        if is_valid_value(url_col[i]):
            group.hasUrl = url_col[i]
        if is_valid_value(created_col[i]):
            group.wasCreated = created_col[i]
        if is_valid_value(last_modified_col[i]):
            group.wasLastModified = last_modified_col[i]
        if is_valid_value(version_col[i]):
            group.hasVersion = version_col[i]
        if is_valid_value(contributors_col[i]):
            group.hasContributors = contributors_col[i]
        if is_valid_value(associated_groups_col[i]):
            group.hasAssociatedGroups = associated_groups_col[i]
        if is_valid_value(associated_groups_citations_col[i]):
            group.hasAssociatedGroupsCitations = associated_groups_citations_col[i]
        if is_valid_value(relationship_citations_col[i]):
            group.hasRelationshipCitations = relationship_citations_col[i]


def map_software(software_data):
    software = software_data.get("software")
    id_col = software.get("ID").to_numpy()
    name_col = software.get("name").to_numpy()
    description_col = software.get("description").to_numpy()
    url_col = software.get("url").to_numpy()
    created_col = software.get("created").to_numpy()
    last_modified_col = software.get("last modified").to_numpy()
    version_col = software.get("version").to_numpy()
    contributors_col = software.get("contributors").to_numpy()
    platforms_col = software.get("platforms").to_numpy()
    aliases_col = software.get("aliases").to_numpy()
    type_col = software.get("type").to_numpy()
    relationship_citations_col = software.get("relationship citations").to_numpy()
    for i in range(len(software.index)):
        software_inst = ontology.Software(id_col[i])
        software_inst.hasId = id_col[i]
        if is_valid_value(name_col[i]):
            software_inst.hasName = name_col[i]
        if is_valid_value(description_col[i]):
            software_inst.hasDescription = description_col[i]
        if is_valid_value(url_col[i]):
            software_inst.hasUrl = url_col[i]
        if is_valid_value(created_col[i]):
            software_inst.wasCreated = created_col[i]
        if is_valid_value(last_modified_col[i]):
            software_inst.wasLastModified = last_modified_col[i]
        if is_valid_value(version_col[i]):
            software_inst.hasVersion = version_col[i]
        if is_valid_value(contributors_col[i]):
            software_inst.hasContributors = contributors_col[i]
        if is_valid_value(platforms_col[i]):
            software_inst.hasPlatforms = platforms_col[i]
        if is_valid_value(aliases_col[i]):
            software_inst.hasAliases = aliases_col[i]
        if is_valid_value(type_col[i]):
            software_inst.hasType = type_col[i]
        if is_valid_value(relationship_citations_col[i]):
            software_inst.hasRelationshipCitations = relationship_citations_col[i]


def enterprise_map_techniques(techniques_data):
    techniques = techniques_data.get("techniques")
    id_col = techniques.get("ID").to_numpy()
    name_col = techniques.get("name").to_numpy()
    description_col = techniques.get("description").to_numpy()
    url_col = techniques.get("url").to_numpy()
    created_col = techniques.get("created").to_numpy()
    last_modified_col = techniques.get("last modified").to_numpy()
    version_col = techniques.get("version").to_numpy()
    detection_col = techniques.get("detection").to_numpy()
    platforms_col = techniques.get("platforms").to_numpy()
    data_sources_col = techniques.get("data sources").to_numpy()
    defenses_bypassed_col = techniques.get("defenses bypassed").to_numpy()
    contributors_col = techniques.get("contributors").to_numpy()
    permissions_required_col = techniques.get("permissions required").to_numpy()
    supports_remote_col = techniques.get("supports remote").to_numpy()
    system_requirements_col = techniques.get("system requirements").to_numpy()
    impact_type_col = techniques.get("impact type").to_numpy()
    effective_permissions_col = techniques.get("effective permissions").to_numpy()
    relationship_citations_col = techniques.get("relationship citations").to_numpy()
    tactics_col = techniques.get("tactics").to_numpy()
    for i in range(len(techniques.index)):
        technique = ontology.Technique(id_col[i])
        technique.hasId = id_col[i]
        technique.hasDomain = "enterprise"

        technique_subtechnique = id_col[i].split(".", 1)
        if len(technique_subtechnique) == 2:
            parent_technique = ontology.Technique(technique_subtechnique[0])
            parent_technique.hasSubTechnique.append(technique)

        if is_valid_value(name_col[i]):
            technique.hasName = name_col[i]
        if is_valid_value(description_col[i]):
            technique.hasDescription = description_col[i]
        if is_valid_value(url_col[i]):
            technique.hasUrl = url_col[i]
        if is_valid_value(created_col[i]):
            technique.wasCreated = created_col[i]
        if is_valid_value(last_modified_col[i]):
            technique.wasLastModified = last_modified_col[i]
        if is_valid_value(version_col[i]):
            technique.hasVersion = version_col[i]
        if is_valid_value(detection_col[i]):
            technique.hasDetection = detection_col[i]
        if is_valid_value(platforms_col[i]):
            technique.hasPlatforms = platforms_col[i]
        if is_valid_value(data_sources_col[i]):
            technique.hasDataSources = data_sources_col[i]
        if is_valid_value(defenses_bypassed_col[i]):
            technique.hasDefensesBypassed = defenses_bypassed_col[i]
        if is_valid_value(contributors_col[i]):
            technique.hasContributors = contributors_col[i]
        if is_valid_value(permissions_required_col[i]):
            technique.hasPermissionsRequired = permissions_required_col[i]
        if is_valid_value(supports_remote_col[i]):
            technique.supportsRemote = bool(supports_remote_col[i])
        if is_valid_value(system_requirements_col[i]):
            technique.hasSystemRequirements = system_requirements_col[i]
        if is_valid_value(impact_type_col[i]):
            technique.hasImpactType = impact_type_col[i]
        if is_valid_value(effective_permissions_col[i]):
            technique.hasEffectivePermissions = effective_permissions_col[i]
        if is_valid_value(relationship_citations_col[i]):
            technique.hasRelationshipCitations = relationship_citations_col[i]
        if is_valid_value(tactics_col[i]):
            for tactic in tactics_col[i].split(", "):
                tactic_inst = ontology.search_one(type=ontology.Tactic, hasName=tactic)
                tactic_inst.usesTechnique.append(technique)


def mobile_map_techniques(techniques_data):
    techniques = techniques_data.get("techniques")
    id_col = techniques.get("ID").to_numpy()
    name_col = techniques.get("name").to_numpy()
    description_col = techniques.get("description").to_numpy()
    url_col = techniques.get("url").to_numpy()
    created_col = techniques.get("created").to_numpy()
    last_modified_col = techniques.get("last modified").to_numpy()
    version_col = techniques.get("version").to_numpy()
    detection_col = techniques.get("detection").to_numpy()
    platforms_col = techniques.get("platforms").to_numpy()
    contributors_col = techniques.get("contributors").to_numpy()
    mtc_id_col = techniques.get("MTC ID").to_numpy()
    tactic_type_col = techniques.get("tactic type").to_numpy()
    relationship_citations_col = techniques.get("relationship citations").to_numpy()
    tactics_col = techniques.get("tactics").to_numpy()
    for i in range(len(techniques.index)):
        technique = ontology.Technique(id_col[i])
        technique.hasId = id_col[i]
        technique.hasDomain = "mobile"

        technique_subtechnique = id_col[i].split(".", 1)
        if len(technique_subtechnique) == 2:
            parent_technique = ontology.Technique(technique_subtechnique[0])
            parent_technique.hasSubTechnique.append(technique)

        if is_valid_value(name_col[i]):
            technique.hasName = name_col[i]
        if is_valid_value(description_col[i]):
            technique.hasDescription = description_col[i]
        if is_valid_value(url_col[i]):
            technique.hasUrl = url_col[i]
        if is_valid_value(created_col[i]):
            technique.wasCreated = created_col[i]
        if is_valid_value(last_modified_col[i]):
            technique.wasLastModified = last_modified_col[i]
        if is_valid_value(version_col[i]):
            technique.hasVersion = version_col[i]
        if is_valid_value(detection_col[i]):
            technique.hasDetection = detection_col[i]
        if is_valid_value(platforms_col[i]):
            technique.hasPlatforms = platforms_col[i]
        if is_valid_value(contributors_col[i]):
            technique.hasContributors = contributors_col[i]
        if is_valid_value(mtc_id_col[i]):
            technique.hasMtcId = mtc_id_col[i]
        if is_valid_value(tactic_type_col[i]):
            technique.hasTacticType = tactic_type_col[i]
        if is_valid_value(relationship_citations_col[i]):
            technique.hasRelationshipCitations = relationship_citations_col[i]
        if is_valid_value(tactics_col[i]):
            for tactic in tactics_col[i].split(", "):
                tactic_inst = ontology.search_one(type=ontology.Tactic, hasName=tactic)
                tactic_inst.usesTechnique.append(technique)


def ics_map_techniques(techniques_data):
    techniques = techniques_data.get("techniques")
    id_col = techniques.get("ID").to_numpy()
    name_col = techniques.get("name").to_numpy()
    description_col = techniques.get("description").to_numpy()
    url_col = techniques.get("url").to_numpy()
    created_col = techniques.get("created").to_numpy()
    last_modified_col = techniques.get("last modified").to_numpy()
    version_col = techniques.get("version").to_numpy()
    detection_col = techniques.get("detection").to_numpy()
    platforms_col = techniques.get("platforms").to_numpy()
    data_sources_col = techniques.get("data sources").to_numpy()
    contributors_col = techniques.get("contributors").to_numpy()
    relationship_citations_col = techniques.get("relationship citations").to_numpy()
    tactics_col = techniques.get("tactics").to_numpy()
    for i in range(len(techniques.index)):
        technique = ontology.Technique(id_col[i])
        technique.hasId = id_col[i]
        technique.hasDomain = "ics"
        if is_valid_value(name_col[i]):
            technique.hasName = name_col[i]
        if is_valid_value(description_col[i]):
            technique.hasDescription = description_col[i]
        if is_valid_value(url_col[i]):
            technique.hasUrl = url_col[i]
        if is_valid_value(created_col[i]):
            technique.wasCreated = created_col[i]
        if is_valid_value(last_modified_col[i]):
            technique.wasLastModified = last_modified_col[i]
        if is_valid_value(version_col[i]):
            technique.hasVersion = version_col[i]
        if is_valid_value(detection_col[i]):
            technique.hasDetection = detection_col[i]
        if is_valid_value(platforms_col[i]):
            technique.hasPlatforms = platforms_col[i]
        if is_valid_value(data_sources_col[i]):
            technique.hasDataSources = data_sources_col[i]
        if is_valid_value(contributors_col[i]):
            technique.hasContributors = contributors_col[i]
        if is_valid_value(relationship_citations_col[i]):
            technique.hasRelationshipCitations = relationship_citations_col[i]
        if is_valid_value(tactics_col[i]):
            for tactic in tactics_col[i].split(", "):
                tactic_inst = ontology.search_one(type=ontology.Tactic, hasName=tactic)
                tactic_inst.usesTechnique.append(technique)


def map_mitigation_technique_relation(mitigations_data):
    mitigation_technique_relations = mitigations_data.get("techniques addressed")
    mitigations = mitigation_technique_relations.get("source ID").to_numpy()
    techniques = mitigation_technique_relations.get("target ID").to_numpy()
    for i in range(len(mitigation_technique_relations.index)):
        mitigation_inst = ontology.Mitigation(mitigations[i])
        technique_inst = ontology.Technique(techniques[i])
        mitigation_inst.mitigates.append(technique_inst)


def map_group_technique_relation(groups_data):
    group_technique_relations = groups_data.get("techniques used")
    groups = group_technique_relations.get("source ID").to_numpy()
    techniques = group_technique_relations.get("target ID").to_numpy()
    for i in range(len(group_technique_relations.index)):
        groups_inst = ontology.Group(groups[i])
        technique_inst = ontology.Technique(techniques[i])
        groups_inst.usesTechnique.append(technique_inst)


def map_software_technique_relation(software_data):
    software_technique_relations = software_data.get("techniques used")
    software = software_technique_relations.get("source ID").to_numpy()
    techniques = software_technique_relations.get("target ID").to_numpy()
    for i in range(len(software_technique_relations.index)):
        software_inst = ontology.Software(software[i])
        technique_inst = ontology.Technique(techniques[i])
        software_inst.usesTechnique.append(technique_inst)


def map_group_software_relation(groups_data):
    group_software_relations = groups_data.get("associated software")
    groups = group_software_relations.get("source ID").to_numpy()
    software = group_software_relations.get("target ID").to_numpy()
    for i in range(len(group_software_relations.index)):
        groups_inst = ontology.Group(groups[i])
        software_inst = ontology.Software(software[i])
        groups_inst.usesSoftware.append(software_inst)


def main():
    # ics
    attackdata = attackToExcel.get_stix_data("ics-attack")
    tactics_data = stixToDf.tacticsToDf(attackdata)
    mitigations_data = stixToDf.mitigationsToDf(attackdata)
    groups_data = stixToDf.groupsToDf(attackdata)
    software_data = stixToDf.softwareToDf(attackdata)
    techniques_data = stixToDf.techniquesToDf(attackdata, "ics-attack")
    map_tactics(tactics_data, "ics")
    map_groups(groups_data)
    map_mitigations(mitigations_data, "ics")
    map_software(software_data)
    ics_map_techniques(techniques_data)
    map_mitigation_technique_relation(mitigations_data)
    map_group_technique_relation(groups_data)
    map_software_technique_relation(software_data)
    map_group_software_relation(groups_data)

    # mobile
    attackdata = attackToExcel.get_stix_data("mobile-attack")
    tactics_data = stixToDf.tacticsToDf(attackdata)
    mitigations_data = stixToDf.mitigationsToDf(attackdata)
    groups_data = stixToDf.groupsToDf(attackdata)
    software_data = stixToDf.softwareToDf(attackdata)
    techniques_data = stixToDf.techniquesToDf(attackdata, "mobile-attack")
    map_tactics(tactics_data, "mobile")
    map_groups(groups_data)
    map_mitigations(mitigations_data, "mobile")
    map_software(software_data)
    mobile_map_techniques(techniques_data)
    map_mitigation_technique_relation(mitigations_data)
    map_group_technique_relation(groups_data)
    map_software_technique_relation(software_data)
    map_group_software_relation(groups_data)

    # enterprise
    attackdata = attackToExcel.get_stix_data("enterprise-attack")
    tactics_data = stixToDf.tacticsToDf(attackdata)
    mitigations_data = stixToDf.mitigationsToDf(attackdata)
    groups_data = stixToDf.groupsToDf(attackdata)
    software_data = stixToDf.softwareToDf(attackdata)
    techniques_data = stixToDf.techniquesToDf(attackdata, "enterprise-attack")
    map_tactics(tactics_data, "enterprise")
    map_groups(groups_data)
    map_mitigations(mitigations_data, "enterprise")
    map_software(software_data)
    enterprise_map_techniques(techniques_data)
    map_mitigation_technique_relation(mitigations_data)
    map_group_technique_relation(groups_data)
    map_software_technique_relation(software_data)
    map_group_software_relation(groups_data)

    ontology.save(file="malware.owl", format="rdfxml")


if __name__ == "__main__":
    main()
